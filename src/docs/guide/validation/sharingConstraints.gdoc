A common pattern in Griffon is to use Command Objectsfor validating user-submitted data and then copy the properties of the command object to the relevant domain classes. This often means that your command objects and domain classes share properties and their constraints. You could manually copy and paste the constraints between the two, but that's a very error-prone approach. Instead, make use of Griffon' global constraints and import mechanism.

h3. Global Constraints

In addition to defining constraints in domain classes, command objects and [other validateable classes|guide:validationNonDomainAndCommandObjectClasses], you can also define them in @griffon-app/conf/Config.groovy@:

{code}
griffon.grorm.default.constraints = {
    '*'(nullable: true, size: 1..20)
    myShared(nullable: false, blank: false)
}
{code}

These constraints are not attached to any particular classes, but they can be easily referenced from any validateable class:

{code:java}
@griffon.transform.Domain
class User {
    ...

    static constraints = {
        login shared: "myShared"
    }
}
{code}

Note the use of the @shared@ argument, whose value is the name of one of the constraints defined in @griffon.grorm.default.constraints@. Despite the name of the configuration setting, you can reference these shared constraints from any validateable class, such as command objects.

The '*' constraint is a special case: it means that the associated constraints ('nullable' and 'size' in the above example) will be applied to all properties in all validateable classes. These defaults can be overridden by the constraints declared in a validateable class.

h3. Importing Constraints

There is an alternative approach to sharing constraints that allows you to import a set of constraints from one class into another.

Let's say you have a domain class like so:

{code}
@griffon.transform.Domain
class User {
    String firstName
    String lastName
    String passwordHash

    static constraints = {
        firstName blank: false, nullable: false
        lastName blank: false, nullable: false
        passwordHash blank: false, nullable: false
    }
}
{code}

You then want to create a command object, @UserCommand@, that shares some of the properties of the domain class and the corresponding constraints. You do this with the @importFrom()@ method:

{code}
@griffon.plugins.scaffolding.ComamndObject
class UserCommandObject {
    String firstName
    String lastName
    String password
    String confirmPassword

    static constraints = {
        importFrom User

        password blank: false, nullable: false
        confirmPassword blank: false, nullable: false
    }
}
{code}

This will import all the constraints from the @User@ domain class and apply them to @UserCommandObject@. The import will ignore any constraints in the source class (@User@) that don't have corresponding properties in the importing class (@UserCommandObject@). In the above example, only the 'firstName' and 'lastName' constraints will be imported into @UserCommandObject@ because those are the only properties shared by the two classes.

If you want more control over which constraints are imported, use the @include@ and @exclude@ arguments. Both of these accept a list of simple or regular expression strings that are matched against the property names in the source constraints. So for example, if you only wanted to import the 'lastName' constraint you would use:

{code}
...
static constraints = {
    importFrom User, include: ["lastName"]
    ...
}
{code}

or if you wanted all constraints that ended with 'Name':

{code}
...
static constraints = {
    importFrom User, include: [/.*Name/]
    ...
}
{code}

Of course, @exclude@ does the reverse, specifying which constraints should _not_ be imported.
